@using ODK.Umbraco.Members;
@using ODK.Umbraco.Payments;
@using ODK.Umbraco.Web.Mvc;
@inherits ODK.Umbraco.Web.Mvc.OdkUmbracoTemplatePage
@{
    Layout = "Master.cshtml";

    MemberModel member = CurrentMemberModel;
    HtmlHelper<MemberModel> memberHelper = Html.For<MemberModel>(member);

    string currencyCode = Model.Content.GetPropertyValue<string>("subscriptionCurrency");

    IPublishedContent[] subscriptions = Model.Content.Children.ToArray();

    string paypalButtonId = Model.Content.GetPropertyValue<string>("subscriptionPaypalButtonId");

    MemberPayment lastPayment = PaymentService.GetLastPayment(CurrentMember.Id);
}

@if (Request.QueryString["payment"] == "cancelled")
{
    <div class="container">
        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
            Payment cancelled
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    </div>
}

@if (Request.QueryString["payment"] == "complete")
{
    <div class="container">
        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
            Payment complete
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    </div>
}

<div class="content">
    <div class="container">
        <div class="row">
            @if (member.Type != MemberTypes.None)
            {
                <div class="col-6">
                    <div class="form-group">
                        @memberHelper.LabelFor(x => x.Type, "Current Membership Type", new { @class = "form-control-label" })
                        <span class="form-control-plaintext">@member.Type</span>
                    </div>
                </div>
            }
            @if (lastPayment != null)
            {
                string lastPaymentCurrencySymbol = GetCurrencySymbol(lastPayment.CurrencyCode);
                <div class="col-6">
                    <div class="form-group">
                        <label class="form-control-label">Last payment</label>
                        <span class="form-control-plaintext">@GetAmount(lastPayment.CurrencyCode, lastPayment.Amount) on @lastPayment.Date.ToString("dd MMMM yyyy")</span>
                    </div>
                </div>
            }
        </div>

        @if (subscriptions.Length == 1)
        {
            IPublishedContent subscription = subscriptions.Single();
            <h3>@subscription.GetPropertyValue("title")</h3>
            @Html.Raw(subscription.GetPropertyValue("description"))
            @PaymentButton(subscription, currencyCode, paypalButtonId)
        }
        else
        {
            <div id="subscriptionTypes">
                @for (int i = 0; i < subscriptions.Length; i++)
                {
                    @SubscriptionAccordionItem(subscriptions[i], currencyCode, paypalButtonId, i == 0)
                }
            </div>
        }
    </div>
</div>

<div id="paypal-button"></div>

@helper SubscriptionAccordionItem(IPublishedContent subscription, string currencyCode, string paypalButtonId, bool expanded)
    {
        string type = subscription.Name.Replace(" ", "-");
        string title = subscription.GetPropertyValue<string>("title");
        string description = subscription.GetPropertyValue<string>("description");

        <div class="card">
            <div class="card-header" id="heading-@type">
                <h5 class="mb-0">
                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapse-@type" aria-expanded="true" aria-controls="collapse-@type">@title</button>
                </h5>
            </div>

            <div id="collapse-@type" class="collapse @Html.Raw(expanded ? "show" : null)" aria-labelledby="heading-@type" data-parent="#subscriptionTypes">
                <div class="card-body">
                    @Html.Raw(@description)

                    @PaymentButton(subscription, currencyCode, paypalButtonId)
                </div>
            </div>
        </div>
}

@helper PaymentButton(IPublishedContent subscription, string currencyCode, string paypalButtonId)
    {
        string type = subscription.GetPropertyValue<string>("payPalMembershipType");
        double amount = subscription.GetPropertyValue<double>("amount");

        using (Html.BeginUmbracoForm("Start", "Payments", FormMethod.Post, new { id = "payments-form-" + subscription.Id }))
        {
            <input type="hidden" name="amount" value="@amount" />
            <input type="hidden" name="currencyCode" value="@currencyCode" />
        }

        <form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top" data-payment-form="#payments-form-@subscription.Id">
            <input type="hidden" name="cmd" value="_s-xclick">
            <input type="hidden" name="hosted_button_id" value="@paypalButtonId">
            <input type="hidden" name="currency_code" value="@currencyCode">
            <input type="hidden" name="on0" value="Membership Types">
            <input type="hidden" name="os0" value="@type" />
            <input type="hidden" name="custom" data-payment-token />

            <button type="submit" class="btn btn-primary">Pay now</button>
            <span>@GetAmount(currencyCode, amount)</span>
            <span class="text-muted">You will be redirected to PayPal to finalise the payment</span>
        </form>
}

@functions
{
    string GetCurrencySymbol(string code)
    {
        switch (code)
        {
            case "GBP":
                return "£";

            case "USD":
            case "AUD":
                return "$";

            case "EUR":
                return "€";
        }

        return null;
    }

    string GetAmount(string currencyCode, double amount)
    {
        string currencySymbol = GetCurrencySymbol(currencyCode);
        return string.Format("{0}{1:0.00}", currencySymbol, amount);
    }
}

@section Scripts
{
    @Scripts.Render("~/bundles/js/account")
}