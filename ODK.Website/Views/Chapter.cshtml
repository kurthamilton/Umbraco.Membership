@using ODK.Umbraco.Events;
@using ODK.Umbraco.Members;
@using ODK.Website.Models;
@inherits ODK.Umbraco.Web.Mvc.OdkUmbracoTemplatePage
@{
    Layout = "Master.cshtml";

    string redirectUrl = Model.Content.GetPropertyValue<string>("redirectUrl");
    if (!string.IsNullOrWhiteSpace(redirectUrl) && Model.Content.GetPropertyValue<bool>("redirectEnabled"))
    {
        Response.Redirect(redirectUrl);
        return;
    }
}

<div class="container">
    <div class="row">
        <div class="col-lg-9 col-md-8 order-2 order-md-1">
            @if (CurrentMember == null)
            {
                @Html.Partial("Content")
            }

            @RenderLatestMembers()
            @RenderInstagramFeed()
        </div>

        <div class="col-lg-3 col-md-4 order-1 order-md-2">
            <div class="sidebar content">
                @RenderUpcomingEvents()
            </div>
        </div>
    </div>
</div>

@helper RenderUpcomingEvents()
{
    IPublishedContent eventsPage = Model.Content.GetPropertyValue<IPublishedContent>("eventsPage");

    int maxItems = Model.Content.GetPropertyValue<int>("numberOfNextEvents");
    if (maxItems <= 0)
    {
        maxItems = 3;
    }

    EventModel[] nextEvents = EventService.GetNextEvents(eventsPage, CurrentMember, maxItems).ToArray();
    if (nextEvents.Length == 0)
    {
        return;
    }

    Dictionary<int, EventResponseType> responses = CurrentMember != null ? EventService.GetMemberResponses(CurrentMember.Id, nextEvents.Select(x => x.Id)) : null;

    <div class="card">
        <div class="card-header">
            Upcoming events
        </div>
        <div class="card-body events">
            @foreach (EventModel ev in nextEvents)
            {
                <div class="event">
                    <h5 class="card-title">
                        @if (responses != null && responses.ContainsKey(ev.Id))
                        {
                            @Html.Partial("EventResponseIcon", responses[ev.Id])
                        }
                        <a href="@ev.Url">@ev.Name</a>
                    </h5>
                    <h6 class="d-inline-block d-md-block">@ev.Date.ToString("dd MMMM yyyy")</h6>
                    <span class="d-md-none">|</span>
                    <div class="d-inline-block d-md-block">@ev.Location</div>
                </div>
            }
        </div>
    </div>
}

@helper RenderInstagramFeed()
{
    string username = Model.Content.GetPropertyValue<string>("instagramUsername");
    if (string.IsNullOrEmpty(username))
    {
        return;
    }

    int maxItems = Model.Content.GetPropertyValue<int>("instagramMaxItems");
    if (maxItems <= 0)
    {
        maxItems = 8;
    }

    string apiUrl = "https://apinsta.herokuapp.com/u";
    string baseUrl = "https://www.instagram.com";

    <div class="content">
        <h3>Latest Instagram Photos</h3>
        <div class="feed--instagram content--ajax row" data-instagram-url="@apiUrl/@username" data-instagram-maxitems="@maxItems">
            @for (int i = 0; i < maxItems; i++)
            {
                <div class="media-item col-3">
                    <a href="@baseUrl/p/{code}" target="_blank"><img class="media-item__image" /></a>
                </div>
            }
        </div>
        <p class="text-right">
            <i class="fa fa-instagram"></i>&nbsp;<a href="@baseUrl/@username" target="_blank">@username</a>
        </p>
    </div>
}

@helper RenderLatestMembers()
{
    int maxItems = Model.Content.GetPropertyValue<int>("numberOfLatestMembers");
    if (maxItems <= 0)
    {
        maxItems = 8;
    }

    MemberModel[] members = MemberService.GetMembers(new MemberSearchCriteria(Model.Content.Id)
    {
        MaxItems = maxItems,
        Sort = m => m.OrderByDescending(x => x.Joined)
    }, Umbraco).ToArray();

    if (members.Length == 0)
    {
        return;
    }

    <div class="content">
        <h3>Latest members</h3>
        <div class="row">
            @foreach (MemberModel member in members)
            {
                <div class="col-lg-3 col-6">
                    @Html.Partial("PersonThumbnail", ModelFor<PersonThumbnailViewModel>(new PersonThumbnailViewModel(member)))
                </div>
            }
        </div>
    </div>
}