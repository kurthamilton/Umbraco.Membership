@using ODK.Umbraco.Content;
@using ODK.Umbraco.Members;
@using ODK.Umbraco.Mvc;
@using ODK.Website.Controllers;
@inherits ODK.Umbraco.Web.Mvc.OdkUmbracoTemplatePage
@{
    if (CurrentMember != null)
    {
        return;
    }

    string loginButtonText = HomePage.GetHomePageValue<string>("loginButtonText");
    
    LoginModel model = TempData["Model"] as LoginModel;
    bool isError = model != null;
    
    HtmlHelper<LoginModel> loginHelper = Html.For<LoginModel>(model != null ? model : new LoginModel());
}

@using (Html.BeginUmbracoForm<AccountController>("Login", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    
    <div class="modal @(isError ? "show" : null)" tabindex="-1" role="dialog" id="login-modal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="form-group">
                        @loginHelper.LabelFor(x => x.Email)
                        @loginHelper.TextBoxFor(x => x.Email, new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @loginHelper.LabelFor(x => x.Password)
                        @loginHelper.TextBoxFor(x => x.Password, new { @class = "form-control", type = "password" })
                    </div>
                </div>
                <div class="modal-footer">
                    @if (isError)
                    {
                        <div class="text-danger w-100">
                            The @loginHelper.DisplayNameFor(x => x.Email) or @loginHelper.DisplayNameFor(x => x.Password) is incorrect
                        </div>
                    }
                    <button type="submit" class="btn btn-primary">@loginButtonText</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}