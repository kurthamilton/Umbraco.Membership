@using ODK.Umbraco.Content;
@using ODK.Umbraco.Members;
@using ODK.Umbraco.Settings;
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    HomePageSettings homePageSettings = Model.Content.HomePageSettings();

    IPublishedContent home = homePageSettings.Content;
    IPublishedContent member = Umbraco.MembershipHelper.GetCurrentMember();
    IEnumerable<IPublishedContent> selection = home.MenuItems(member);

    
    IPublishedContent logo = homePageSettings.GetPropertyValue<IPublishedContent>("siteLogo");
    
    string loginButtonText = member == null ? homePageSettings.GetPropertyValue<string>("loginButtonText") : null;
    string registerButtonText = member == null ? homePageSettings.GetPropertyValue<string>("registerButtonText") : null;
    IPublishedContent registerPage = member == null ? homePageSettings.GetPropertyValue<IPublishedContent>("registerPage") : null;
    string registerUrl = registerPage != null ? registerPage.Url : null;
    
    IPublishedContent accountPage = member != null ? homePageSettings.GetPropertyValue<IPublishedContent>("accountPage") : null;
    string accountUrl = accountPage != null ? accountPage.Url : null;
    string logoutButtonText = member != null ? homePageSettings.GetPropertyValue<string>("logoutButtonText") : null;
    string logoutUrl = "/umbraco/surface/account/logout";
}

@if (logo != null)
{
    <div class="bg-dark text-center">
        <a href="@home.Url"><img class="logo--main" src="@logo.Url" /></a>
    </div>
}

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
        @if (logo == null)
        {
            <a class="navbar-brand" href="@homePageSettings.Content.Url">
                @homePageSettings.Name
            </a>
        }

        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="d-lg-none">
            @MembershipLinks(member, loginButtonText, registerUrl, registerButtonText, logoutUrl, logoutButtonText, accountUrl)
        </div>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                @foreach (var item in selection.Where(x => x.TemplateId > 0))
                {
                    <li class="nav-item">
                        <a class="nav-link @(item.IsAncestorOrSelf(Model.Content) ? "active" : null)" href="@item.Url">@item.Name</a>
                    </li>
                }

                <li class="nav-item d-lg-none">
                    @LogoutLink(member, "nav-link", logoutUrl, logoutButtonText)
                </li>
            </ul>
        </div>

        <div class="d-none d-lg-block">
            @MembershipLinks(member, loginButtonText, registerUrl, registerButtonText, logoutUrl, logoutButtonText, accountUrl)
        </div>
    </div>
</nav>

@helper MembershipLinks(IPublishedContent member, string loginButtonText, string registerUrl, string registerButtonText, string logoutUrl, string logoutButtonText, string accountUrl)
{
    if (member == null)
    {
        <button class="btn btn-primary" data-toggle="modal" data-target="#login-modal">@loginButtonText</button>

        if (!string.IsNullOrEmpty(registerUrl))
        {
            <a class="btn btn-success" href="@registerUrl">@registerButtonText</a>
        }
    }
    else
    {
        if (!string.IsNullOrEmpty(accountUrl))
        {
            <a class="btn btn-primary" href="@accountUrl">Account</a>
        }
        
        @LogoutLink(member, "btn btn-light d-none d-lg-inline", logoutUrl, logoutButtonText)
    }
}

@helper LogoutLink(IPublishedContent member, string cssClass, string url, string text)
{
    if (member == null)
    {
        return;
    }

    <a class="@cssClass" href="@url">@text</a>
}